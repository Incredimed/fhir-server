//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Health.Fhir.MongoDb.Features.Storage
{
    internal partial class DocumentClientWithExceptionHandler : Microsoft.Azure.Documents.IDocumentClient, System.IDisposable
    {
        private readonly Microsoft.Azure.Documents.IDocumentClient _inner;
        public DocumentClientWithExceptionHandler(Microsoft.Azure.Documents.IDocumentClient inner)
        {
            _inner = inner ?? throw new System.ArgumentNullException(nameof(inner));
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Security.SecureString Microsoft.Azure.Documents.IDocumentClient.AuthKey
        {
            get
            {
                return _inner.AuthKey;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        Microsoft.Azure.Documents.Client.ConnectionPolicy Microsoft.Azure.Documents.IDocumentClient.ConnectionPolicy
        {
            get
            {
                return _inner.ConnectionPolicy;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        Microsoft.Azure.Documents.ConsistencyLevel Microsoft.Azure.Documents.IDocumentClient.ConsistencyLevel
        {
            get
            {
                return _inner.ConsistencyLevel;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Uri Microsoft.Azure.Documents.IDocumentClient.ReadEndpoint
        {
            get
            {
                return _inner.ReadEndpoint;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Uri Microsoft.Azure.Documents.IDocumentClient.ServiceEndpoint
        {
            get
            {
                return _inner.ServiceEndpoint;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Object Microsoft.Azure.Documents.IDocumentClient.Session
        {
            get
            {
                return _inner.Session;
            }

            set
            {
                _inner.Session = value;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Uri Microsoft.Azure.Documents.IDocumentClient.WriteEndpoint
        {
            get
            {
                return _inner.WriteEndpoint;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentAsync(System.String attachmentsLink, System.IO.Stream mediaStream, Microsoft.Azure.Documents.Client.MediaOptions options, Microsoft.Azure.Documents.Client.RequestOptions requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.CreateAttachmentAsync(attachmentsLink, mediaStream, options, requestOptions, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentAsync(System.String documentLink, System.Object attachment, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.CreateAttachmentAsync(documentLink, attachment, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentAsync(System.Uri documentUri, System.IO.Stream mediaStream, Microsoft.Azure.Documents.Client.MediaOptions options, Microsoft.Azure.Documents.Client.RequestOptions requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.CreateAttachmentAsync(documentUri, mediaStream, options, requestOptions, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentAsync(System.Uri documentUri, System.Object attachment, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.CreateAttachmentAsync(documentUri, attachment, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<T> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery<T>(System.String documentLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateAttachmentQuery<T>(documentLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.Attachment> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery(System.String documentLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateAttachmentQuery(documentLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<T> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery<T>(System.String documentLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateAttachmentQuery<T>(documentLink, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery(System.String documentLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateAttachmentQuery(documentLink, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<T> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery<T>(System.String documentLink, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateAttachmentQuery<T>(documentLink, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery(System.String documentLink, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateAttachmentQuery(documentLink, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<T> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery<T>(System.Uri documentUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateAttachmentQuery<T>(documentUri, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.Attachment> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery(System.Uri documentUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateAttachmentQuery(documentUri, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<T> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery<T>(System.Uri documentUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateAttachmentQuery<T>(documentUri, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery(System.Uri documentUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateAttachmentQuery(documentUri, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<T> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery<T>(System.Uri documentUri, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateAttachmentQuery<T>(documentUri, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateAttachmentQuery(System.Uri documentUri, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateAttachmentQuery(documentUri, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.Conflict> Microsoft.Azure.Documents.IDocumentClient.CreateConflictQuery(System.String collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateConflictQuery(collectionLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateConflictQuery(System.String collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateConflictQuery(collectionLink, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateConflictQuery(System.String collectionLink, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateConflictQuery(collectionLink, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.Conflict> Microsoft.Azure.Documents.IDocumentClient.CreateConflictQuery(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateConflictQuery(documentCollectionUri, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateConflictQuery(System.Uri documentCollectionUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateConflictQuery(documentCollectionUri, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateConflictQuery(System.Uri documentCollectionUri, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateConflictQuery(documentCollectionUri, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Database>> Microsoft.Azure.Documents.IDocumentClient.CreateDatabaseAsync(Microsoft.Azure.Documents.Database database, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateDatabaseAsync(database, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Database>> Microsoft.Azure.Documents.IDocumentClient.CreateDatabaseIfNotExistsAsync(Microsoft.Azure.Documents.Database database, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateDatabaseIfNotExistsAsync(database, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.Database> Microsoft.Azure.Documents.IDocumentClient.CreateDatabaseQuery(Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDatabaseQuery(feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateDatabaseQuery(Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDatabaseQuery(querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateDatabaseQuery(System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDatabaseQuery(sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Document>> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentAsync(System.String collectionLink, System.Object document, Microsoft.Azure.Documents.Client.RequestOptions options, System.Boolean disableAutomaticIdGeneration, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.CreateDocumentAsync(collectionLink, document, options, disableAutomaticIdGeneration, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Document>> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentAsync(System.Uri documentCollectionUri, System.Object document, Microsoft.Azure.Documents.Client.RequestOptions options, System.Boolean disableAutomaticIdGeneration, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.CreateDocumentAsync(documentCollectionUri, document, options, disableAutomaticIdGeneration, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        Microsoft.Azure.Documents.Linq.IDocumentQuery<Microsoft.Azure.Documents.Document> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentChangeFeedQuery(System.String collectionLink, Microsoft.Azure.Documents.Client.ChangeFeedOptions feedOptions)
        {
            return _inner.CreateDocumentChangeFeedQuery(collectionLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        Microsoft.Azure.Documents.Linq.IDocumentQuery<Microsoft.Azure.Documents.Document> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentChangeFeedQuery(System.Uri collectionLink, Microsoft.Azure.Documents.Client.ChangeFeedOptions feedOptions)
        {
            return _inner.CreateDocumentChangeFeedQuery(collectionLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.DocumentCollection>> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionAsync(System.String databaseLink, Microsoft.Azure.Documents.DocumentCollection documentCollection, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateDocumentCollectionAsync(databaseLink, documentCollection, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.DocumentCollection>> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionAsync(System.Uri databaseUri, Microsoft.Azure.Documents.DocumentCollection documentCollection, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateDocumentCollectionAsync(databaseUri, documentCollection, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.DocumentCollection>> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionIfNotExistsAsync(System.String databaseLink, Microsoft.Azure.Documents.DocumentCollection documentCollection, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateDocumentCollectionIfNotExistsAsync(databaseLink, documentCollection, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.DocumentCollection>> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionIfNotExistsAsync(System.Uri databaseUri, Microsoft.Azure.Documents.DocumentCollection documentCollection, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateDocumentCollectionIfNotExistsAsync(databaseUri, documentCollection, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.DocumentCollection> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionQuery(System.String databaseLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentCollectionQuery(databaseLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionQuery(System.String databaseLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentCollectionQuery(databaseLink, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionQuery(System.String databaseLink, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentCollectionQuery(databaseLink, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.DocumentCollection> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionQuery(System.Uri databaseUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentCollectionQuery(databaseUri, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionQuery(System.Uri databaseUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentCollectionQuery(databaseUri, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentCollectionQuery(System.Uri databaseUri, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentCollectionQuery(databaseUri, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<T> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery<T>(System.String collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentQuery<T>(collectionLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.Document> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery(System.String collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentQuery(collectionLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<T> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery<T>(System.String collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentQuery<T>(collectionLink, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery(System.String collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentQuery(collectionLink, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<T> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery<T>(System.String collectionLink, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentQuery<T>(collectionLink, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery(System.String collectionLink, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentQuery(collectionLink, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<T> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery<T>(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentQuery<T>(documentCollectionUri, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.Document> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentQuery(documentCollectionUri, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<T> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery<T>(System.Uri documentCollectionUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentQuery<T>(documentCollectionUri, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery(System.Uri documentCollectionUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentQuery(documentCollectionUri, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<T> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery<T>(System.Uri documentCollectionUri, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentQuery<T>(documentCollectionUri, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateDocumentQuery(System.Uri documentCollectionUri, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateDocumentQuery(documentCollectionUri, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.Offer> Microsoft.Azure.Documents.IDocumentClient.CreateOfferQuery(Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateOfferQuery(feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateOfferQuery(Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateOfferQuery(querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateOfferQuery(System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateOfferQuery(sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Permission>> Microsoft.Azure.Documents.IDocumentClient.CreatePermissionAsync(System.String userLink, Microsoft.Azure.Documents.Permission permission, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreatePermissionAsync(userLink, permission, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Permission>> Microsoft.Azure.Documents.IDocumentClient.CreatePermissionAsync(System.Uri userUri, Microsoft.Azure.Documents.Permission permission, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreatePermissionAsync(userUri, permission, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.Permission> Microsoft.Azure.Documents.IDocumentClient.CreatePermissionQuery(System.String permissionsLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreatePermissionQuery(permissionsLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreatePermissionQuery(System.String permissionsLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreatePermissionQuery(permissionsLink, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreatePermissionQuery(System.String permissionsLink, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreatePermissionQuery(permissionsLink, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.Permission> Microsoft.Azure.Documents.IDocumentClient.CreatePermissionQuery(System.Uri userUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreatePermissionQuery(userUri, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreatePermissionQuery(System.Uri userUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreatePermissionQuery(userUri, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreatePermissionQuery(System.Uri userUri, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreatePermissionQuery(userUri, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.StoredProcedure>> Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureAsync(System.String collectionLink, Microsoft.Azure.Documents.StoredProcedure storedProcedure, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateStoredProcedureAsync(collectionLink, storedProcedure, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.StoredProcedure>> Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.StoredProcedure storedProcedure, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateStoredProcedureAsync(documentCollectionUri, storedProcedure, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.StoredProcedure> Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureQuery(System.String collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateStoredProcedureQuery(collectionLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureQuery(System.String collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateStoredProcedureQuery(collectionLink, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureQuery(System.String collectionLink, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateStoredProcedureQuery(collectionLink, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.StoredProcedure> Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureQuery(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateStoredProcedureQuery(documentCollectionUri, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureQuery(System.Uri documentCollectionUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateStoredProcedureQuery(documentCollectionUri, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateStoredProcedureQuery(System.Uri documentCollectionUri, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateStoredProcedureQuery(documentCollectionUri, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Trigger>> Microsoft.Azure.Documents.IDocumentClient.CreateTriggerAsync(System.String collectionLink, Microsoft.Azure.Documents.Trigger trigger, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateTriggerAsync(collectionLink, trigger, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Trigger>> Microsoft.Azure.Documents.IDocumentClient.CreateTriggerAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Trigger trigger, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateTriggerAsync(documentCollectionUri, trigger, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.Trigger> Microsoft.Azure.Documents.IDocumentClient.CreateTriggerQuery(System.String collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateTriggerQuery(collectionLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateTriggerQuery(System.String collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateTriggerQuery(collectionLink, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateTriggerQuery(System.String collectionLink, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateTriggerQuery(collectionLink, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.Trigger> Microsoft.Azure.Documents.IDocumentClient.CreateTriggerQuery(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateTriggerQuery(documentCollectionUri, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateTriggerQuery(System.Uri documentCollectionUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateTriggerQuery(documentCollectionUri, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateTriggerQuery(System.Uri documentCollectionUri, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateTriggerQuery(documentCollectionUri, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.User>> Microsoft.Azure.Documents.IDocumentClient.CreateUserAsync(System.String databaseLink, Microsoft.Azure.Documents.User user, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateUserAsync(databaseLink, user, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.User>> Microsoft.Azure.Documents.IDocumentClient.CreateUserAsync(System.Uri databaseUri, Microsoft.Azure.Documents.User user, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateUserAsync(databaseUri, user, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.UserDefinedFunction>> Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionAsync(System.String collectionLink, Microsoft.Azure.Documents.UserDefinedFunction function, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateUserDefinedFunctionAsync(collectionLink, function, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.UserDefinedFunction>> Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.UserDefinedFunction function, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.CreateUserDefinedFunctionAsync(documentCollectionUri, function, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.UserDefinedFunction> Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionQuery(System.String collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateUserDefinedFunctionQuery(collectionLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionQuery(System.String collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateUserDefinedFunctionQuery(collectionLink, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionQuery(System.String collectionLink, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateUserDefinedFunctionQuery(collectionLink, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.UserDefinedFunction> Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionQuery(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateUserDefinedFunctionQuery(documentCollectionUri, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionQuery(System.Uri documentCollectionUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateUserDefinedFunctionQuery(documentCollectionUri, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateUserDefinedFunctionQuery(System.Uri documentCollectionUri, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateUserDefinedFunctionQuery(documentCollectionUri, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.User> Microsoft.Azure.Documents.IDocumentClient.CreateUserQuery(System.String usersLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateUserQuery(usersLink, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateUserQuery(System.String usersLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateUserQuery(usersLink, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateUserQuery(System.String usersLink, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateUserQuery(usersLink, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IOrderedQueryable<Microsoft.Azure.Documents.User> Microsoft.Azure.Documents.IDocumentClient.CreateUserQuery(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateUserQuery(documentCollectionUri, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateUserQuery(System.Uri documentCollectionUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateUserQuery(documentCollectionUri, querySpec, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Linq.IQueryable<System.Object> Microsoft.Azure.Documents.IDocumentClient.CreateUserQuery(System.Uri documentCollectionUri, System.String sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions)
        {
            return _inner.CreateUserQuery(documentCollectionUri, sqlExpression, feedOptions);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.DeleteAttachmentAsync(System.String attachmentLink, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.DeleteAttachmentAsync(attachmentLink, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.DeleteAttachmentAsync(System.Uri attachmentUri, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.DeleteAttachmentAsync(attachmentUri, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Conflict>> Microsoft.Azure.Documents.IDocumentClient.DeleteConflictAsync(System.String conflictLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteConflictAsync(conflictLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Conflict>> Microsoft.Azure.Documents.IDocumentClient.DeleteConflictAsync(System.Uri conflictUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteConflictAsync(conflictUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Database>> Microsoft.Azure.Documents.IDocumentClient.DeleteDatabaseAsync(System.String databaseLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteDatabaseAsync(databaseLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Database>> Microsoft.Azure.Documents.IDocumentClient.DeleteDatabaseAsync(System.Uri databaseUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteDatabaseAsync(databaseUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Document>> Microsoft.Azure.Documents.IDocumentClient.DeleteDocumentAsync(System.String documentLink, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.DeleteDocumentAsync(documentLink, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Document>> Microsoft.Azure.Documents.IDocumentClient.DeleteDocumentAsync(System.Uri documentUri, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.DeleteDocumentAsync(documentUri, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.DocumentCollection>> Microsoft.Azure.Documents.IDocumentClient.DeleteDocumentCollectionAsync(System.String documentCollectionLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteDocumentCollectionAsync(documentCollectionLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.DocumentCollection>> Microsoft.Azure.Documents.IDocumentClient.DeleteDocumentCollectionAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteDocumentCollectionAsync(documentCollectionUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Permission>> Microsoft.Azure.Documents.IDocumentClient.DeletePermissionAsync(System.String permissionLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeletePermissionAsync(permissionLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Permission>> Microsoft.Azure.Documents.IDocumentClient.DeletePermissionAsync(System.Uri permissionUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeletePermissionAsync(permissionUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.StoredProcedure>> Microsoft.Azure.Documents.IDocumentClient.DeleteStoredProcedureAsync(System.String storedProcedureLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteStoredProcedureAsync(storedProcedureLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.StoredProcedure>> Microsoft.Azure.Documents.IDocumentClient.DeleteStoredProcedureAsync(System.Uri storedProcedureUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteStoredProcedureAsync(storedProcedureUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Trigger>> Microsoft.Azure.Documents.IDocumentClient.DeleteTriggerAsync(System.String triggerLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteTriggerAsync(triggerLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Trigger>> Microsoft.Azure.Documents.IDocumentClient.DeleteTriggerAsync(System.Uri triggerUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteTriggerAsync(triggerUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.User>> Microsoft.Azure.Documents.IDocumentClient.DeleteUserAsync(System.String userLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteUserAsync(userLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.User>> Microsoft.Azure.Documents.IDocumentClient.DeleteUserAsync(System.Uri userUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteUserAsync(userUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.UserDefinedFunction>> Microsoft.Azure.Documents.IDocumentClient.DeleteUserDefinedFunctionAsync(System.String functionLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteUserDefinedFunctionAsync(functionLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.UserDefinedFunction>> Microsoft.Azure.Documents.IDocumentClient.DeleteUserDefinedFunctionAsync(System.Uri functionUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.DeleteUserDefinedFunctionAsync(functionUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.StoredProcedureResponse<TValue>> Microsoft.Azure.Documents.IDocumentClient.ExecuteStoredProcedureAsync<TValue>(System.String storedProcedureLink, Microsoft.Azure.Documents.Client.RequestOptions options, params System.Object[] procedureParams)
        {
            return _inner.ExecuteStoredProcedureAsync<TValue>(storedProcedureLink, options, procedureParams);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.StoredProcedureResponse<TValue>> Microsoft.Azure.Documents.IDocumentClient.ExecuteStoredProcedureAsync<TValue>(System.String storedProcedureLink, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken, params System.Object[] procedureParams)
        {
            return _inner.ExecuteStoredProcedureAsync<TValue>(storedProcedureLink, options, cancellationToken, procedureParams);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.StoredProcedureResponse<TValue>> Microsoft.Azure.Documents.IDocumentClient.ExecuteStoredProcedureAsync<TValue>(System.String storedProcedureLink, params System.Object[] procedureParams)
        {
            return _inner.ExecuteStoredProcedureAsync<TValue>(storedProcedureLink, procedureParams);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.StoredProcedureResponse<TValue>> Microsoft.Azure.Documents.IDocumentClient.ExecuteStoredProcedureAsync<TValue>(System.Uri storedProcedureUri, Microsoft.Azure.Documents.Client.RequestOptions options, params System.Object[] procedureParams)
        {
            return _inner.ExecuteStoredProcedureAsync<TValue>(storedProcedureUri, options, procedureParams);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.StoredProcedureResponse<TValue>> Microsoft.Azure.Documents.IDocumentClient.ExecuteStoredProcedureAsync<TValue>(System.Uri storedProcedureUri, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken, params System.Object[] procedureParams)
        {
            return _inner.ExecuteStoredProcedureAsync<TValue>(storedProcedureUri, options, cancellationToken, procedureParams);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.StoredProcedureResponse<TValue>> Microsoft.Azure.Documents.IDocumentClient.ExecuteStoredProcedureAsync<TValue>(System.Uri storedProcedureUri, params System.Object[] procedureParams)
        {
            return _inner.ExecuteStoredProcedureAsync<TValue>(storedProcedureUri, procedureParams);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Threading.Tasks.Task<Microsoft.Azure.Documents.DatabaseAccount> Microsoft.Azure.Documents.IDocumentClient.GetDatabaseAccountAsync()
        {
            return _inner.GetDatabaseAccountAsync();
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.ReadAttachmentAsync(System.String attachmentLink, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReadAttachmentAsync(attachmentLink, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.ReadAttachmentAsync(System.Uri attachmentUri, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReadAttachmentAsync(attachmentUri, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.ReadAttachmentFeedAsync(System.String attachmentsLink, Microsoft.Azure.Documents.Client.FeedOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReadAttachmentFeedAsync(attachmentsLink, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.ReadAttachmentFeedAsync(System.Uri documentUri, Microsoft.Azure.Documents.Client.FeedOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReadAttachmentFeedAsync(documentUri, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Conflict>> Microsoft.Azure.Documents.IDocumentClient.ReadConflictAsync(System.String conflictLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadConflictAsync(conflictLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Conflict>> Microsoft.Azure.Documents.IDocumentClient.ReadConflictAsync(System.Uri conflictUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadConflictAsync(conflictUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.Conflict>> Microsoft.Azure.Documents.IDocumentClient.ReadConflictFeedAsync(System.String conflictsLink, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadConflictFeedAsync(conflictsLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.Conflict>> Microsoft.Azure.Documents.IDocumentClient.ReadConflictFeedAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadConflictFeedAsync(documentCollectionUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Database>> Microsoft.Azure.Documents.IDocumentClient.ReadDatabaseAsync(System.String databaseLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadDatabaseAsync(databaseLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Database>> Microsoft.Azure.Documents.IDocumentClient.ReadDatabaseAsync(System.Uri databaseUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadDatabaseAsync(databaseUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.Database>> Microsoft.Azure.Documents.IDocumentClient.ReadDatabaseFeedAsync(Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadDatabaseFeedAsync(options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Document>> Microsoft.Azure.Documents.IDocumentClient.ReadDocumentAsync(System.String documentLink, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReadDocumentAsync(documentLink, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.DocumentResponse<T>> Microsoft.Azure.Documents.IDocumentClient.ReadDocumentAsync<T>(System.String documentLink, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReadDocumentAsync<T>(documentLink, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Document>> Microsoft.Azure.Documents.IDocumentClient.ReadDocumentAsync(System.Uri documentUri, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReadDocumentAsync(documentUri, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.DocumentResponse<T>> Microsoft.Azure.Documents.IDocumentClient.ReadDocumentAsync<T>(System.Uri documentUri, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReadDocumentAsync<T>(documentUri, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.DocumentCollection>> Microsoft.Azure.Documents.IDocumentClient.ReadDocumentCollectionAsync(System.String documentCollectionLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadDocumentCollectionAsync(documentCollectionLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.DocumentCollection>> Microsoft.Azure.Documents.IDocumentClient.ReadDocumentCollectionAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadDocumentCollectionAsync(documentCollectionUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.DocumentCollection>> Microsoft.Azure.Documents.IDocumentClient.ReadDocumentCollectionFeedAsync(System.String collectionsLink, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadDocumentCollectionFeedAsync(collectionsLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.DocumentCollection>> Microsoft.Azure.Documents.IDocumentClient.ReadDocumentCollectionFeedAsync(System.Uri databaseUri, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadDocumentCollectionFeedAsync(databaseUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<System.Object>> Microsoft.Azure.Documents.IDocumentClient.ReadDocumentFeedAsync(System.String documentsLink, Microsoft.Azure.Documents.Client.FeedOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReadDocumentFeedAsync(documentsLink, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<System.Object>> Microsoft.Azure.Documents.IDocumentClient.ReadDocumentFeedAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReadDocumentFeedAsync(documentCollectionUri, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.MediaResponse> Microsoft.Azure.Documents.IDocumentClient.ReadMediaAsync(System.String mediaLink, System.Threading.CancellationToken cancellationToken)
        {
            return _inner.ReadMediaAsync(mediaLink, cancellationToken);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.MediaResponse> Microsoft.Azure.Documents.IDocumentClient.ReadMediaMetadataAsync(System.String mediaLink)
        {
            return _inner.ReadMediaMetadataAsync(mediaLink);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Offer>> Microsoft.Azure.Documents.IDocumentClient.ReadOfferAsync(System.String offerLink)
        {
            try
            {
                return await _inner.ReadOfferAsync(offerLink);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.Offer>> Microsoft.Azure.Documents.IDocumentClient.ReadOffersFeedAsync(Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadOffersFeedAsync(options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.PartitionKeyRange>> Microsoft.Azure.Documents.IDocumentClient.ReadPartitionKeyRangeFeedAsync(System.String partitionKeyRangesOrCollectionLink, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadPartitionKeyRangeFeedAsync(partitionKeyRangesOrCollectionLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.PartitionKeyRange>> Microsoft.Azure.Documents.IDocumentClient.ReadPartitionKeyRangeFeedAsync(System.Uri partitionKeyRangesOrCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadPartitionKeyRangeFeedAsync(partitionKeyRangesOrCollectionUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Permission>> Microsoft.Azure.Documents.IDocumentClient.ReadPermissionAsync(System.String permissionLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadPermissionAsync(permissionLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Permission>> Microsoft.Azure.Documents.IDocumentClient.ReadPermissionAsync(System.Uri permissionUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadPermissionAsync(permissionUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.Permission>> Microsoft.Azure.Documents.IDocumentClient.ReadPermissionFeedAsync(System.String permissionsLink, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadPermissionFeedAsync(permissionsLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.Permission>> Microsoft.Azure.Documents.IDocumentClient.ReadPermissionFeedAsync(System.Uri userUri, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadPermissionFeedAsync(userUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.StoredProcedure>> Microsoft.Azure.Documents.IDocumentClient.ReadStoredProcedureAsync(System.String storedProcedureLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadStoredProcedureAsync(storedProcedureLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.StoredProcedure>> Microsoft.Azure.Documents.IDocumentClient.ReadStoredProcedureAsync(System.Uri storedProcedureUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadStoredProcedureAsync(storedProcedureUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.StoredProcedure>> Microsoft.Azure.Documents.IDocumentClient.ReadStoredProcedureFeedAsync(System.String storedProceduresLink, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadStoredProcedureFeedAsync(storedProceduresLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.StoredProcedure>> Microsoft.Azure.Documents.IDocumentClient.ReadStoredProcedureFeedAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadStoredProcedureFeedAsync(documentCollectionUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Trigger>> Microsoft.Azure.Documents.IDocumentClient.ReadTriggerAsync(System.String triggerLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadTriggerAsync(triggerLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Trigger>> Microsoft.Azure.Documents.IDocumentClient.ReadTriggerAsync(System.Uri triggerUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadTriggerAsync(triggerUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.Trigger>> Microsoft.Azure.Documents.IDocumentClient.ReadTriggerFeedAsync(System.String triggersLink, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadTriggerFeedAsync(triggersLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.Trigger>> Microsoft.Azure.Documents.IDocumentClient.ReadTriggerFeedAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadTriggerFeedAsync(documentCollectionUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.User>> Microsoft.Azure.Documents.IDocumentClient.ReadUserAsync(System.String userLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadUserAsync(userLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.User>> Microsoft.Azure.Documents.IDocumentClient.ReadUserAsync(System.Uri userUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadUserAsync(userUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.UserDefinedFunction>> Microsoft.Azure.Documents.IDocumentClient.ReadUserDefinedFunctionAsync(System.String functionLink, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadUserDefinedFunctionAsync(functionLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.UserDefinedFunction>> Microsoft.Azure.Documents.IDocumentClient.ReadUserDefinedFunctionAsync(System.Uri functionUri, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReadUserDefinedFunctionAsync(functionUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.UserDefinedFunction>> Microsoft.Azure.Documents.IDocumentClient.ReadUserDefinedFunctionFeedAsync(System.String userDefinedFunctionsLink, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadUserDefinedFunctionFeedAsync(userDefinedFunctionsLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.UserDefinedFunction>> Microsoft.Azure.Documents.IDocumentClient.ReadUserDefinedFunctionFeedAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadUserDefinedFunctionFeedAsync(documentCollectionUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.User>> Microsoft.Azure.Documents.IDocumentClient.ReadUserFeedAsync(System.String usersLink, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadUserFeedAsync(usersLink, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.FeedResponse<Microsoft.Azure.Documents.User>> Microsoft.Azure.Documents.IDocumentClient.ReadUserFeedAsync(System.Uri databaseUri, Microsoft.Azure.Documents.Client.FeedOptions options)
        {
            try
            {
                return await _inner.ReadUserFeedAsync(databaseUri, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.ReplaceAttachmentAsync(Microsoft.Azure.Documents.Attachment attachment, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReplaceAttachmentAsync(attachment, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.ReplaceAttachmentAsync(System.Uri attachmentUri, Microsoft.Azure.Documents.Attachment attachment, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReplaceAttachmentAsync(attachmentUri, attachment, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Document>> Microsoft.Azure.Documents.IDocumentClient.ReplaceDocumentAsync(Microsoft.Azure.Documents.Document document, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReplaceDocumentAsync(document, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Document>> Microsoft.Azure.Documents.IDocumentClient.ReplaceDocumentAsync(System.String documentLink, System.Object document, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReplaceDocumentAsync(documentLink, document, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Document>> Microsoft.Azure.Documents.IDocumentClient.ReplaceDocumentAsync(System.Uri documentUri, System.Object document, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.ReplaceDocumentAsync(documentUri, document, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.DocumentCollection>> Microsoft.Azure.Documents.IDocumentClient.ReplaceDocumentCollectionAsync(Microsoft.Azure.Documents.DocumentCollection documentCollection, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReplaceDocumentCollectionAsync(documentCollection, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.DocumentCollection>> Microsoft.Azure.Documents.IDocumentClient.ReplaceDocumentCollectionAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.DocumentCollection documentCollection, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReplaceDocumentCollectionAsync(documentCollectionUri, documentCollection, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Offer>> Microsoft.Azure.Documents.IDocumentClient.ReplaceOfferAsync(Microsoft.Azure.Documents.Offer offer)
        {
            try
            {
                return await _inner.ReplaceOfferAsync(offer);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Permission>> Microsoft.Azure.Documents.IDocumentClient.ReplacePermissionAsync(Microsoft.Azure.Documents.Permission permission, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReplacePermissionAsync(permission, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Permission>> Microsoft.Azure.Documents.IDocumentClient.ReplacePermissionAsync(System.Uri permissionUri, Microsoft.Azure.Documents.Permission permission, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReplacePermissionAsync(permissionUri, permission, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.StoredProcedure>> Microsoft.Azure.Documents.IDocumentClient.ReplaceStoredProcedureAsync(Microsoft.Azure.Documents.StoredProcedure storedProcedure, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReplaceStoredProcedureAsync(storedProcedure, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.StoredProcedure>> Microsoft.Azure.Documents.IDocumentClient.ReplaceStoredProcedureAsync(System.Uri storedProcedureUri, Microsoft.Azure.Documents.StoredProcedure storedProcedure, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReplaceStoredProcedureAsync(storedProcedureUri, storedProcedure, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Trigger>> Microsoft.Azure.Documents.IDocumentClient.ReplaceTriggerAsync(Microsoft.Azure.Documents.Trigger trigger, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReplaceTriggerAsync(trigger, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Trigger>> Microsoft.Azure.Documents.IDocumentClient.ReplaceTriggerAsync(System.Uri triggerUri, Microsoft.Azure.Documents.Trigger trigger, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReplaceTriggerAsync(triggerUri, trigger, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.User>> Microsoft.Azure.Documents.IDocumentClient.ReplaceUserAsync(Microsoft.Azure.Documents.User user, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReplaceUserAsync(user, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.User>> Microsoft.Azure.Documents.IDocumentClient.ReplaceUserAsync(System.Uri userUri, Microsoft.Azure.Documents.User user, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReplaceUserAsync(userUri, user, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.UserDefinedFunction>> Microsoft.Azure.Documents.IDocumentClient.ReplaceUserDefinedFunctionAsync(Microsoft.Azure.Documents.UserDefinedFunction function, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReplaceUserDefinedFunctionAsync(function, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.UserDefinedFunction>> Microsoft.Azure.Documents.IDocumentClient.ReplaceUserDefinedFunctionAsync(System.Uri userDefinedFunctionUri, Microsoft.Azure.Documents.UserDefinedFunction function, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.ReplaceUserDefinedFunctionAsync(userDefinedFunctionUri, function, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.MediaResponse> Microsoft.Azure.Documents.IDocumentClient.UpdateMediaAsync(System.String mediaLink, System.IO.Stream mediaStream, Microsoft.Azure.Documents.Client.MediaOptions options, System.Threading.CancellationToken cancellationToken)
        {
            return _inner.UpdateMediaAsync(mediaLink, mediaStream, options, cancellationToken);
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.UpsertAttachmentAsync(System.String attachmentsLink, System.IO.Stream mediaStream, Microsoft.Azure.Documents.Client.MediaOptions options, Microsoft.Azure.Documents.Client.RequestOptions requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.UpsertAttachmentAsync(attachmentsLink, mediaStream, options, requestOptions, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.UpsertAttachmentAsync(System.String documentLink, System.Object attachment, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.UpsertAttachmentAsync(documentLink, attachment, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.UpsertAttachmentAsync(System.Uri documentUri, System.IO.Stream mediaStream, Microsoft.Azure.Documents.Client.MediaOptions options, Microsoft.Azure.Documents.Client.RequestOptions requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.UpsertAttachmentAsync(documentUri, mediaStream, options, requestOptions, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Attachment>> Microsoft.Azure.Documents.IDocumentClient.UpsertAttachmentAsync(System.Uri documentUri, System.Object attachment, Microsoft.Azure.Documents.Client.RequestOptions options, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.UpsertAttachmentAsync(documentUri, attachment, options, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Document>> Microsoft.Azure.Documents.IDocumentClient.UpsertDocumentAsync(System.String collectionLink, System.Object document, Microsoft.Azure.Documents.Client.RequestOptions options, System.Boolean disableAutomaticIdGeneration, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.UpsertDocumentAsync(collectionLink, document, options, disableAutomaticIdGeneration, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Document>> Microsoft.Azure.Documents.IDocumentClient.UpsertDocumentAsync(System.Uri documentCollectionUri, System.Object document, Microsoft.Azure.Documents.Client.RequestOptions options, System.Boolean disableAutomaticIdGeneration, System.Threading.CancellationToken cancellationToken)
        {
            try
            {
                return await _inner.UpsertDocumentAsync(documentCollectionUri, document, options, disableAutomaticIdGeneration, cancellationToken);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Permission>> Microsoft.Azure.Documents.IDocumentClient.UpsertPermissionAsync(System.String userLink, Microsoft.Azure.Documents.Permission permission, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.UpsertPermissionAsync(userLink, permission, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Permission>> Microsoft.Azure.Documents.IDocumentClient.UpsertPermissionAsync(System.Uri userUri, Microsoft.Azure.Documents.Permission permission, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.UpsertPermissionAsync(userUri, permission, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.StoredProcedure>> Microsoft.Azure.Documents.IDocumentClient.UpsertStoredProcedureAsync(System.String collectionLink, Microsoft.Azure.Documents.StoredProcedure storedProcedure, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.UpsertStoredProcedureAsync(collectionLink, storedProcedure, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.StoredProcedure>> Microsoft.Azure.Documents.IDocumentClient.UpsertStoredProcedureAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.StoredProcedure storedProcedure, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.UpsertStoredProcedureAsync(documentCollectionUri, storedProcedure, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Trigger>> Microsoft.Azure.Documents.IDocumentClient.UpsertTriggerAsync(System.String collectionLink, Microsoft.Azure.Documents.Trigger trigger, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.UpsertTriggerAsync(collectionLink, trigger, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.Trigger>> Microsoft.Azure.Documents.IDocumentClient.UpsertTriggerAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.Trigger trigger, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.UpsertTriggerAsync(documentCollectionUri, trigger, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.User>> Microsoft.Azure.Documents.IDocumentClient.UpsertUserAsync(System.String databaseLink, Microsoft.Azure.Documents.User user, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.UpsertUserAsync(databaseLink, user, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.User>> Microsoft.Azure.Documents.IDocumentClient.UpsertUserAsync(System.Uri databaseUri, Microsoft.Azure.Documents.User user, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.UpsertUserAsync(databaseUri, user, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.UserDefinedFunction>> Microsoft.Azure.Documents.IDocumentClient.UpsertUserDefinedFunctionAsync(System.String collectionLink, Microsoft.Azure.Documents.UserDefinedFunction function, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.UpsertUserDefinedFunctionAsync(collectionLink, function, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        async System.Threading.Tasks.Task<Microsoft.Azure.Documents.Client.ResourceResponse<Microsoft.Azure.Documents.UserDefinedFunction>> Microsoft.Azure.Documents.IDocumentClient.UpsertUserDefinedFunctionAsync(System.Uri documentCollectionUri, Microsoft.Azure.Documents.UserDefinedFunction function, Microsoft.Azure.Documents.Client.RequestOptions options)
        {
            try
            {
                return await _inner.UpsertUserDefinedFunctionAsync(documentCollectionUri, function, options);
            }
            catch (System.Exception ex)
            {
                ProcessException(ex);
                throw;
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        void System.IDisposable.Dispose()
        {
            ((System.IDisposable)_inner).Dispose();
        }
    }
}